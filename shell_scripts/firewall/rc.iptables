#!/bin/bash
IPT="/usr/sbin/iptables"

SCANNING=0

IFACE_LO="lo"
ETH="eth0"
WLAN="wlan0"

RSYNC_IP=0/0

IP_BLOCK_LIST=()
IP_ALLOWED_LIST=(
# suckless.org
78.47.162.114

# mirrors.kernel.org
198.145.20.143
149.20.37.36

# docs.scala-lang.org
151.101.44.133
# scala-lang.org
128.178.154.159

# en.cppreference.org
74.114.88.139

# open-std.org
93.90.116.65

# router
192.168.1.254

# libgen
93.174.95.27

# forms.xda-developers.com
207.244.72.9

# xda-developers.com
209.58.128.90


50.16.212.215

203.59.129.129

# emberjs.com
192.30.252.154

# pokeapi.co
104.18.58.143

# vim.org
216.34.181.97

#suckless.org
78.47.162.114
)

FW_RULES_RESET(){
  # DROP EVERYTHING
	$IPT -P INPUT ACCEPT
	$IPT -P OUTPUT ACCEPT

	$IPT -F

	$IPT -X

	echo " "
	echo "#######################################"
	echo "# WARNING: RUNNING WITHOUT A FIREWALL #"
	echo "#######################################"
	echo " "
}

MOD_LOAD(){
	echo " "
	echo "#######################################"
	echo "# LOADING FIREWALL..                  #"
	echo "#######################################"
	echo " "
	echo "Loading kernel modules.."
/sbin/modprobe ip_tables
/sbin/modprobe ip_conntrack
/sbin/modprobe ip_nat_ftp
/sbin/modprobe ip_conntrack_ftp
# Syn flood protection
	if [ "$SYSCTL" = "" ]
	then
		echo "1" > /proc/sys/net/ipv4/tcp_syncookies
	else
		$SYSCTL net.ipv4.tcp_syscookies="1"
	fi
# Ignore icmp broadcast requests
	if [ "$SYSCTL" = "" ]
	then
		echo "1" > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts
	else
		$SYSCTL net.ipv4.icmp_echo_ignore_broadcasts="1"
	fi
# Enable ip forwarding
	if [ "$SYSCTL" = "" ]
	then
		echo "1" > /proc/sys/net/ipv4/ip_forward
	else
		$SYSCTL net.ipv4.ip_forward="1"
	fi
# Same origin packets
	if [ "$SYSCTL" = "" ]
	then
		echo "1" > /proc/sys/net/ipv4/conf/all/rp_filter
	else
		$SYSCTL net.ipv4.conf.all.rp_filter="1"
	fi
# Disable automatic source routing, this is on by default
	if [ "$SYSCTL" = "" ]
	then
		echo "0" > /proc/sys/net/ipv4/conf/all/accept_source_route
	else
		$SYSCTL net.ipv4.conf.all.accept_source_route="0"
	fi
# Accept only from gateways in the default gateway list
	if [ "$SYSCTL" = "" ]
	then
		echo "1" > /proc/sys/net/ipv4/conf/all/secure_redirects
	else
		$SYSCTL net.ipv4.conf.all.secure_redirects="1"
	fi
}

FW_RULES_LOAD(){
	MOD_LOAD
	# Default Policy to Drop
	$IPT -P INPUT DROP
	$IPT -P OUTPUT DROP

	# User specified chains
	echo "Creating and populating user specified chains .."
	$IPT -N bad_packets
	$IPT -N bad_tcp_packets
	$IPT -N icmp_packets
	$IPT -N udp_inbound
	$IPT -N tcp_inbound
	$IPT -N udp_outbound
	$IPT -N tcp_outbound
##############################################################################

  $IPT -A bad_packets -p ALL -m state --state INVALID -j LOG \
		--log-prefix "Invalid packet: "
	$IPT -A bad_packets -p ALL -m state --state INVALID -j DROP
	$IPT -A bad_packets -p TCP -j bad_tcp_packets
	$IPT -A bad_packets -p ALL -j RETURN

  echo "A"
##############################################################################
	
  $IPT -A bad_tcp_packets -p TCP ! --syn -m conntrack --ctstate NEW -j LOG \
		--log-prefix "New packet not SYN: "
	$IPT -A bad_tcp_packets -p TCP ! --syn -m conntrack --ctstate NEW -j DROP
	$IPT -A bad_tcp_packets -p TCP -j RETURN

  echo "B"
##############################################################################
	
  $IPT -A icmp_packets --fragment -p ICMP -j DROP
	$IPT -A icmp_packets -p ICMP -s 0/0 --icmp-type 8 -j DROP
	$IPT -A icmp_packets -p ICMP -s 0/0 --icmp-type 11 -j ACCEPT
	$IPT -A icmp_packets -p ICMP -j RETURN

  echo "C"
##############################################################################
	
  for x in "${IP_BLOCK_LIST[@]}";
	do
		$IPT -A udp_inbound -p UDP -s $x -j DROP
	done
	
	$IPT -A udp_inbound -p UDP -s 0/0 --destination-port 113 -j REJECT


  $IPT -A udp_inbound -p UDP -j RETURN

  echo "D"
##############################################################################
	
  for x in "${IP_BLOCK_LIST[@]}";
	do
		$IPT -A tcp_inbound -p TCP -s $x -j DROP
	done

#  for x in "${IP_ALLOWED_LIST[@]}";
#  do
#    $IPT -A tcp_inbound -p TCP -s $x --destination-port 80 -j ACCEPT
#  done

  # HTTP
  $IPT -A tcp_inbound -p TCP -s 0/0 --destination-port 80 -j REJECT
  $IPT -A tcp_inbound -p TCP -s 0/0 --destination-port 8080 -j DROP

  # HTTPS
  $IPT -A tcp_inbound -p TCP -s 0/0 --destination-port 443 -j ACCEPT

  $IPT -A tcp_inbound -p TCP -s 0/0 --destination-port 113 -j REJECT

  $IPT -A tcp_inbound -p TCP -s 0/0 --destination-port 37 -j DROP

  $IPT -A tcp_inbound -p TCP -s 0/0 --destination-port 27017 -j DROP

  $IPT -A tcp_inbound -p TCP -s 0/0 --destination-port 22 -j DROP

  # GIT
  $IPT -A tcp_inbound -p TCP -s 0/0 --destination-port 9418 -j ACCEPT
  $IPT -A tcp_inbound -p TCP -s 0/0 --destination-port 6667 -j ACCEPT

  $IPT -A tcp_inbound -p TCP -j RETURN

  echo "E"
##############################################################################
	
  for x in "${IP_BLOCK_LIST[@]}";
	do
		$IPT -A tcp_outbound -p TCP -d $x -j DROP
	done

#  for x in "${IP_ALLOWED_LIST[@]}";
#  do
#    $IPT -A tcp_outbound -p TCP -d $x --destination-port 80 -j ACCEPT
#  done

  # HTTP
  $IPT -A tcp_outbound -p TCP -d 0/0 --destination-port 80 -j REJECT
  $IPT -A tcp_outbound -p TCP -d 0/0 --destination-port 8080 -j DROP

  # HTTPS
  $IPT -A tcp_outbound -p TCP -d 0/0 --destination-port 443 -j ACCEPT

  # IRC
  $IPT -A tcp_outbound -p TCP -d 0/0 --destination-port 6697 -j ACCEPT

  $IPT -A tcp_outbound -p TCP -d 0/0 --destination-port 37 -j DROP

  $IPT -A tcp_outbound -p TCP -d 0/0 --destination-port 27017 -j DROP

  $IPT -A tcp_outbound -p TCP -d 0/0 --destination-port 22 -j ACCEPT

  # GIT
  $IPT -A tcp_outbound -p TCP -d 0/0 --destination-port 9418 -j ACCEPT
  $IPT -A tcp_outbound -p TCP -d 0/0 --destination-port 6667 -j ACCEPT
  echo "F"
##############################################################################
	
  for x in "${IP_BLOCK_LIST[@]}";
	do
		$IPT -A udp_outbound -p UDP -d $x -j DROP
	done

  # DNS
  $IPT -A udp_outbound -p UDP -s 0/0 --destination-port 53 -j ACCEPT

  echo "G"
##############################################################################
	
  $IPT -A INPUT -p ALL -i $IFACE_LO -j ACCEPT
	$IPT -A INPUT -p ALL -d 240.0.0.1 -j DROP
	$IPT -A INPUT -p ALL -j bad_packets
	
  for x in "${IP_BLOCK_LIST[@]}";
	do
		$IPT -A INPUT -p ALL -i $ETH -s $x -j DROP
    $IPT -A INPUT -p ALL -i $WLAN -s $x -j DROP
	done

  $IPT -A INPUT -p TCP -i $ETH -j tcp_inbound
	$IPT -A INPUT -p UDP -i $ETH -j udp_inbound
	$IPT -A INPUT -p ICMP -i $ETH -j icmp_packets
	$IPT -A INPUT -p ALL -i $ETH -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT


  $IPT -A INPUT -p TCP -i $WLAN -j tcp_inbound
  $IPT -A INPUT -p UDP -i $WLAN -j udp_inbound
  $IPT -A INPUT -p ICMP -i $WLAN -j icmp_packets

  $IPT -A INPUT -p ALL -i $WLAN -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
	
  $IPT -A INPUT -m pkttype --pkt-type broadcast -j DROP

  echo "H"
##############################################################################
	
  $IPT -A OUTPUT -p ICMP -m state --state INVALID -j DROP
	$IPT -A OUTPUT -p ALL -o $IFACE_LO -j ACCEPT

	for x in "${IP_BLOCK_LIST[@]}";
	do
		$IPT -A OUTPUT -p ALL -o $ETH -d $x -j DROP
    $IPT -A OUTPUT -p ALL -o $WLAN -d $x -j DROP
	done

  $IPT -A OUTPUT -p TCP -o $ETH -d 10.10.44.1 -j ACCEPT

  $IPT -A OUTPUT -p TCP -o $ETH -j tcp_outbound
  $IPT -A OUTPUT -p UDP -o $ETH -j udp_outbound
  $IPT -A OUTPUT -p ICMP -o $ETH -j icmp_packets
  
	$IPT -A OUTPUT -p TCP -o $WLAN -j tcp_outbound
  $IPT -A OUTPUT -p UDP -o $WLAN -j udp_outbound
  $IPT -A OUTPUT -p ICMP -o $WLAN -j icmp_packets

  echo "I"
}

FW_RELOAD(){
	echo "Reloading ..."
	echo " "
	FW_RULES_RESET
	FW_RULES_LOAD
}

case "$1" in
	start)
		FW_RULES_LOAD
		;;
	stop)
		FW_RULES_RESET
		;;
	reload)
		FW_RELOAD
		;;
	*)
		echo "Usage: $0 (start|stop|reload)"
esac
